===========================
The module 0-add_integer.py
===========================
This module defines an integer addition function "add_integer(a, b=98)"

Usage
=====
"add_integer(...)" return the addition of two arguments, equivalent to using the "+" operator in numbers.

::
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 9)
    14

Tests
=====
Normal functionality: (works with positive or negative integer or floats, floats ara casted into integers before addition).
Second argument is optional, by default is 98:

::
    >>> add_integer(100, -98)
    2

::
    >>> add_integer(7.9, 1)
    8

::
    >>> add_integer(6.1, -1.0)
    5

::
    >>> add_integer(159.56, 1)
    160

::
    >>> add_integer(10)
    108

Exceptions:
"add_integer(...)" expects that both arguments are integer or floats, if not TypeError will be raised.

::
    >>> add_integer("1", 2)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

::
    >>> add_integer(8, "2")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

::
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

"add_integer(...)" will fail if infinity is provided.

::
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

::
    >>> add_integer(5, float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

"add_integer(...)" will fail if NaN number is provided.

::
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer


::
    >>> add_integer(-98, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

"add_integer(...)" will fail if syntax is wrong.

::
    >>> add_integer(-98, 7po)
    Traceback (most recent call last):
    ...
    SyntaxError: invalid syntax

"add_integer(...)" will fail if required arguments are not given.

::
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

::
    >>> add_integer(7, -987, 7)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
