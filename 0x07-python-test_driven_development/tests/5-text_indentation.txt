============================
The module 5-text_indentation.py
============================
This module defines a print function
"def text_indentation(text):"
that prints a text with 2 new lines after each of these characters:
., ? and :

Usage
=====
    "text_indentation(...)" must receive a string,
    prints two lines after the characters ".", "?" and ":".

::
    >>> text_indentation = __import__('5-text_indentation').text_indentation
    >>> text_indentation("Hello. My name is: Alejandro, right?")
    Hello.
    <BLANKLINE>
    My name is:
    <BLANKLINE>
    Alejandro, right?
    <BLANKLINE>

Tests
=====
Normal functionality:
    "text_indentation(...)" must receive a "text" string argument,
    it prints the text and 2 new lines characters if encounters
    the characters ".", "?" and ":", no spaces at the end of beginnig of each sentence.

::
    >>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
    ... Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
    ... Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
    ... Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
    ... Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
    ... rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
    ... stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
    ... cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
    ... beatiorem! Iam ruinas videres""")
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

::
    >>> text_indentation("          ")

::
    >>> text_indentation("Bye.   ")
    Bye.
    <BLANKLINE>

::
    >>> text_indentation("    Spaces at the beginnig.    Spaces at the middle.   Spaces at the end.")
    Spaces at the beginnig.
    <BLANKLINE>
    Spaces at the middle.
    <BLANKLINE>
    Spaces at the end.
    <BLANKLINE>

::
    >>> text_indentation("No ending period")
    No ending period

::
    >>> text_indentation("   Hello.")
    Hello.
    <BLANKLINE>

::
    >>> text_indentation("\n\n\nPrinted three new lines.")
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    Printed three new lines.
    <BLANKLINE>

::
    >>> text_indentation("A \nnew line.")
    A 
    new line.
    <BLANKLINE>

::
    >>> text_indentation("Printing a new-line:\n   Printed.")
    Printing a new-line:
    <BLANKLINE>
    <BLANKLINE>
       Printed.
    <BLANKLINE>

Exceptions:
    argument given to "text_indentation(...)" must be string,
    otherwise a TypeError will be raised.

::
    >>> text_indentation({"1": 1, "2": 2})
    Traceback (most recent call last):
    ...
    TypeError: text must be a string

::
    >>> text_indentation(987)
    Traceback (most recent call last):
    ...
    TypeError: text must be a string

::
    >>> text_indentation(None)
    Traceback (most recent call last):
    ...
    TypeError: text must be a string
